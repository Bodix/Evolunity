// Evolunity for Unity
// Copyright Â© 2020 Bogdan Nikolayev <bodix321@gmail.com>
// All Rights Reserved

using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;

namespace Evolutex.Evolunity.Editor
{
    public static class UnityConstantsGenerator
    {
        public const string FileName = "UnityConstants.cs";

        [MenuItem("Assets/Generate " + FileName, priority = 800)]
        public static void Generate()
        {
            // Try to find an existing file in the project.
            string filePath = string.Empty;
            foreach (string file in Directory.GetFiles(Application.dataPath, "*.cs", SearchOption.AllDirectories))
            {
                if (Path.GetFileName(file) == FileName)
                {
                    filePath = file;

                    break;
                }
            }

            // If no such file exists already, use the save panel to get a folder in which the file will be placed.
            if (string.IsNullOrEmpty(filePath))
            {
                string directory = EditorUtility.OpenFolderPanel("Choose location for " + FileName,
                    Application.dataPath, FileName);

                // Canceled choose? Do nothing.
                if (string.IsNullOrEmpty(directory))
                    return;

                filePath = Path.Combine(directory, FileName);
            }
            
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                writer.WriteLine("// ---------- WARNING!!! ----------");
                writer.WriteLine("// This file is auto-generated by " + nameof(UnityConstantsGenerator) + ".cs.");
                writer.WriteLine("// Don't change this file, because modifications are not saved if the code is regenerated.");
                writer.WriteLine("// --------------------------------");
                writer.WriteLine();
                writer.WriteLine("namespace " + Path.GetFileNameWithoutExtension(FileName));
                writer.WriteLine("{");

                // Tags.
                writer.WriteLine("    public static class Tag");
                writer.WriteLine("    {");
                foreach (string tag in UnityEditorInternal.InternalEditorUtility.tags)
                {
                    writer.WriteLine("        /// <summary>");
                    writer.WriteLine("        /// Name of tag '{0}'.", tag);
                    writer.WriteLine("        /// </summary>");
                    writer.WriteLine("        public const string {0} = \"{1}\";", MakeSafeForCode(tag), tag);
                }
                writer.WriteLine("    }");
                writer.WriteLine();

                // Sorting layers.
                writer.WriteLine("    public static class SortingLayer");
                writer.WriteLine("    {");
                foreach (SortingLayer layer in SortingLayer.layers)
                {
                    writer.WriteLine("        /// <summary>");
                    writer.WriteLine("        /// ID of sorting layer '{0}'.", layer.name);
                    writer.WriteLine("        /// </summary>");
                    writer.WriteLine("        public const int {0} = {1};", MakeSafeForCode(layer.name), layer.id);
                }
                writer.WriteLine("    }");
                writer.WriteLine();

                // Layers.
                writer.WriteLine("    public static class Layer");
                writer.WriteLine("    {");
                for (int i = 0; i < 32; i++)
                {
                    string layer = UnityEditorInternal.InternalEditorUtility.GetLayerName(i);
                    if (!string.IsNullOrEmpty(layer))
                    {
                        writer.WriteLine("        /// <summary>");
                        writer.WriteLine("        /// Index of layer '{0}'.", layer);
                        writer.WriteLine("        /// </summary>");
                        writer.WriteLine("        public const int {0} = {1};", MakeSafeForCode(layer), i);
                    }
                }
                writer.WriteLine();
                
                for (int i = 0; i < 32; i++)
                {
                    string layer = UnityEditorInternal.InternalEditorUtility.GetLayerName(i);
                    if (!string.IsNullOrEmpty(layer))
                    {
                        writer.WriteLine("        /// <summary>");
                        writer.WriteLine("        /// Bitmask of layer '{0}'.", layer);
                        writer.WriteLine("        /// </summary>");
                        writer.WriteLine("        public const int {0}Mask = 1 << {1};", MakeSafeForCode(layer), i);
                    }
                }
                writer.WriteLine("    }");
                writer.WriteLine();

                // Scenes.
                writer.WriteLine("    public static class Scene");
                writer.WriteLine("    {");
                int sceneIndex = 0;
                foreach (EditorBuildSettingsScene scene in EditorBuildSettings.scenes)
                {
                    if (!scene.enabled)
                        continue;

                    string sceneName = Path.GetFileNameWithoutExtension(scene.path);

                    writer.WriteLine("        /// <summary>");
                    writer.WriteLine("        /// ID of scene '{0}'.", sceneName);
                    writer.WriteLine("        /// </summary>");
                    writer.WriteLine("        public const int {0} = {1};", MakeSafeForCode(sceneName), sceneIndex);

                    sceneIndex++;
                }
                writer.WriteLine("    }");
                writer.WriteLine();

                // Input axes.
                writer.WriteLine("    public static class Axis");
                writer.WriteLine("    {");
                HashSet<string> axes = new HashSet<string>();
                SerializedObject inputManagerProp =
                    new SerializedObject(AssetDatabase.LoadAllAssetsAtPath("ProjectSettings/InputManager.asset")[0]);
                foreach (SerializedProperty axe in inputManagerProp.FindProperty("m_Axes"))
                {
                    string name = axe.FindPropertyRelative("m_Name").stringValue;
                    string variableName = MakeSafeForCode(name);
                    if (!axes.Contains(variableName))
                    {
                        writer.WriteLine("        /// <summary>");
                        writer.WriteLine("        /// Input axis '{0}'.", name);
                        writer.WriteLine("        /// </summary>");
                        writer.WriteLine("        public const string {0} = \"{1}\";", variableName, name);
                        axes.Add(variableName);
                    }
                }
                writer.WriteLine("    }");
                
                writer.WriteLine("}");
                writer.WriteLine();
            }

            AssetDatabase.Refresh();

            Debug.Log("The '" + FileName + "' file was successfully generated");
        }

        private static string MakeSafeForCode(string str)
        {
            str = str.Replace(" ", string.Empty);
            str = Regex.Replace(str, "[^a-zA-Z0-9_]", "_", RegexOptions.Compiled);

            return str;
        }
    }
}